[{"content":"本文记录如何使用yjs+quill协同编辑器进行二次部署,使用已经搭建过的yjsdemo实现快速部署 用于服务器更新资源，需要二次部署时使用\n步骤1： 从github仓库中下载源码\n步骤2： 安装npm、nginx反向代理\n步骤3： 在工程目录下npm install\n步骤4： 编辑nginx配置文件,以petherfish.cn为例\n1 sudo nano /etc/nginx/sites-available/petherfish.cn 配置文件如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 server { listen 80; listen [::]:80; server_name petherfish.cn; # 编辑器的反向代理配置 location /edit { proxy_pass http://localhost:5173; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; # WebSocket 支持 proxy_read_timeout 86400; } # WebSocket 服务器的反向代理配置 location /ws { proxy_pass http://localhost:1234; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; proxy_set_header Host $host; proxy_read_timeout 86400; } # 用于处理其他请求 location / { root /usr/share/nginx/html; index index.html index.htm; try_files $uri $uri/ =404; } # 日志配置 access_log /var/log/nginx/petherfish.cn.access.log; error_log /var/log/nginx/petherfish.cn.error.log; } 重启nginx\n1 sudo systemctl restart nginx 步骤5： 本地测试\n1 npm start 1 npm run dev 无报错后访问petherfish.cn/edit/,测试是否可以正常访问\n步骤6： 编写vite.config.js文件，系统服务文件 编写webserver.py文件，系统服务文件\n","date":"2024-11-20T15:00:00+08:00","permalink":"https://0Hzc.github.io/p/%E5%A6%82%E4%BD%95%E5%86%8D%E6%AC%A1%E9%83%A8%E7%BD%B2yjs-quill%E5%8D%8F%E5%90%8C%E7%BC%96%E8%BE%91%E5%99%A8/","title":"如何再次部署yjs+quill协同编辑器"},{"content":"学习开发python项目 附录内容为python的相关语法和库的介绍 主体内容为python项目开发流程和框架结构\nstep1 创建项目目录 在项目目录下创建以下文件：\nREADME.md modules/init.py、modules/readers/init.py utils/init.py main.py step2 编写代码 编写 init.py文件 从模块中的readers的__init__.py文件为例，开始编写代码\n1 2 3 4 5 6 7 #定义一个文件类型的枚举，用于标识不同的文件类型 from enum import Enum class FileType(Enum): H5 = \u0026#34;h5\u0026#34; NC = \u0026#34;nc\u0026#34; RULE = \u0026#34;rule\u0026#34; 编写公共模块 编写基础功能模块 附录 文件说明 关于 utils 文件夹 utils 是 \u0026ldquo;utilities\u0026rdquo;（实用工具）的缩写 这个文件夹用来存放一些通用的工具函数或类 比如文件处理、日志记录、时间格式转换等公共功能 这些功能会被多个其他模块重复使用，所以单独放在一起便于维护\n关于 readers 文件夹 这是运用了模块化编程的思想 readers 文件夹专门用来存放所有与文件读取相关的代码 这样的组织方式有几个好处： 代码结构清晰 相关功能集中管理 便于维护和扩展\n关于 init.py 文件 在 Python 中，任何包含 init.py 文件的文件夹都会被视为一个 Python 包 这个文件可以是空的，仅用来标识这个文件夹是一个 Python 包 它允许你使用 import 语句导入这个文件夹中的模块 例如：\n1 2 # 如果没有 __init__.py，这样的导入是不可能的 from modules.readers import xxx 思想流程 检验系统其中包括：文件转换 → 而文件转换包括其中：文件读取→ 而文件读取时，如果有新的文件类型需要读取，那么就可以制作一个文件读取器 ，后续需要新建新的文件读取，只需要维护这个文件读取器即可 → 文件读取器要能够自动实现类型添加 → 可以在readers文件夹中的 init.py文件中定义一个枚举类，在readers文件夹中创建一个reader_factory.py文件,在这个文件中定义一个readerfactory的类，在reader_factory中创建创建读取器对象的静态方法,之后只要添加新的类型处理，只需要在__init__.py文件中添加新的类型，在reader_factory.py文件中添加新的类型匹配处理即可\n思想流程图：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 检验系统 └── 文件转换 └── 文件读取 ├── readers/__init__.py (定义文件类型枚举) │ └── class FileType(Enum): │ H5 = \u0026#34;h5\u0026#34; │ NC = \u0026#34;nc\u0026#34; │ RULE = \u0026#34;rule\u0026#34; │ # 未来可以在这里添加新类型 │ NEW_TYPE = \u0026#34;new\u0026#34; ← 步骤1：添加新类型 │ ├── readers/reader_factory.py │ └── class ReaderFactory: │ └── create_reader(): │ readers = { │ FileType.H5: H5Reader, │ FileType.NC: NCReader, │ FileType.RULE: RuleReader, │ FileType.NEW_TYPE: NewReader ← 步骤2：添加对应的处理器 │ } │ └── readers/new_reader.py ← 步骤3：实现新的读取器 └── class NewReader(BaseReader): └── def _read(self): # 实现具体的读取逻辑 os库 介绍 os (Operating System) 库是 Python 的标准库之一，提供了与操作系统交互的各种功能，让我们可以使用 Python 来执行操作系统级别的操作，比如：文件和目录操作、进程管理、环境变量操作、路径操作等\n常用方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 ##路径操作 (os.path) # 检查文件或目录是否存在 os.path.exists(\u0026#34;file.txt\u0026#34;) # 返回 True 或 False # 获取文件名和扩展名 os.path.splitext(\u0026#34;file.txt\u0026#34;) # 返回 (\u0026#39;file\u0026#39;, \u0026#39;.txt\u0026#39;) # 拼接路径 os.path.join(\u0026#34;dir\u0026#34;, \u0026#34;file.txt\u0026#34;) # 返回 \u0026#34;dir/file.txt\u0026#34; (Linux) 或 \u0026#34;dir\\file.txt\u0026#34; (Windows) # 获取绝对路径 os.path.abspath(\u0026#34;file.txt\u0026#34;) # 判断是否为目录 os.path.isdir(\u0026#34;dirname\u0026#34;) # 判断是否为文件 os.path.isfile(\u0026#34;file.txt\u0026#34;) ##目录操作 # 获取当前工作目录 os.getcwd() # 改变当前工作目录 os.chdir(\u0026#34;path/to/dir\u0026#34;) # 列出目录内容 os.listdir(\u0026#34;dirname\u0026#34;) # 创建目录 os.mkdir(\u0026#34;dirname\u0026#34;) # 创建单个目录 os.makedirs(\u0026#34;a/b/c\u0026#34;) # 创建多级目录 ##文件操作 # 重命名文件或目录 os.rename(\u0026#34;old.txt\u0026#34;, \u0026#34;new.txt\u0026#34;) # 删除文件 os.remove(\u0026#34;file.txt\u0026#34;) # 删除空目录 os.rmdir(\u0026#34;dirname\u0026#34;) ##系统相关 # 获取环境变量 os.getenv(\u0026#34;PATH\u0026#34;) # 获取系统名称 os.name # \u0026#39;nt\u0026#39; (Windows) 或 \u0026#39;posix\u0026#39; (Linux/Unix) @staticmethod 装饰器 @staticmethod 装饰器用于定义一个静态方法，静态方法不需要访问类的实例属性，也不需要访问类的实例方法，它只是一些与类相关的工具函数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Calculator: # 1. 普通实例方法（需要实例化才能调用） def add(self, a, b): return a + b # 2. 静态方法（不需要实例化就能调用） @staticmethod def subtract(a, b): return a - b # 使用实例方法 calc = Calculator() result1 = calc.add(1, 2) # 需要先创建实例 # 使用静态方法 result2 = Calculator.subtract(5, 3) # 直接通过类名调用 all 变量 all 变量用于定义模块的公共接口，它是一个列表，列出了模块中所有可以被外部导入的变量、函数或类\n1 __all__ = [\u0026#39;check_file_exists\u0026#39;, \u0026#39;get_file_extension\u0026#39;] ","date":"2024-11-09T15:00:00+08:00","permalink":"https://0Hzc.github.io/p/%E5%AD%A6%E4%B9%A0python%E9%A1%B9%E7%9B%AE/","title":"学习python项目"},{"content":"本文主要记录如何配置yolov11所需的anaconda环境以及下载并运行初始模型， 其中关于如何下载anaconda，配置conda至系统环境变量以及如何使用pycharm IDE进行选择conda环境见本文末尾的参考链接\n如何配置环境，并下载初始模型进行测试 conda基础命令 1 2 3 4 5 6 7 8 #查看当前存在哪些conda虚拟环境 conda env list #新建conda虚拟环境 conda create -n yolov11 python=3.10 #yolov11可随意更改,意义为创建的虚拟环境的名字 #激活conda虚拟环境/选择某个环境作为编译环境 conda activate yolov11 #此处的yolov11则为新建时创建的虚拟环境名字 步骤1：GPU安装相关驱动 参考文章尾部链接安装cuda、cudnn\n步骤2：配置虚拟环境 1 2 3 4 5 6 7 8 #查看当前环境存在哪些包 pip list #安装pytorch框架 pip install torch==2.0.0+cu118 torchvision==0.15.1+cu118 --extra-index-url https://download.pytorch.org/whl/cu118 #安装yolo命令包 pip install ultralytics 步骤3：下载模型、预训练权重 访问地址：https://github.com/ultralytics/ultralytics/（yolo的github仓库） 下载使用COCO数据集训练的得到的预训练权重文件、在仓库的Readme的model下的Detection (COCO)部分\nModel YOLO11n YOLO11s YOLO11m YOLO11l YOLO11x 在仓库的realse处下载模型压缩包\n步骤4：使用模型进行测试 1.将在realse下载的模型压缩包解压，并在IDE中打开，让终端在该目录下即可 2.将下载的预训练权重放置该目录下 3.随意准备一张测试图放置该目录下，准备用作目标检测\n1 yolo predict model=yolo11n.pt source=\u0026#39;cat.jpg\u0026#39; #yolo11n.pt修改为下载的预训练权重，cat.jpg修改为准备的图片名和格式 参考链接 https://blog.csdn.net/qq_67105081/article/details/143270109?spm=1001.2014.3001.5502\n","date":"2024-11-08T15:00:00+08:00","permalink":"https://0Hzc.github.io/p/%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8yolov11%E8%BF%9B%E8%A1%8C%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/","title":"初次使用yolov11进行目标检测"},{"content":"本文记录如何使用github的两个仓库进行部署hugo生成的静态html博客\n流程 步骤1： 在github上建立一个私有库，用于存放hugo的源代码（后续记录如何本地安装并调试hugo进行网页效果展示）\n步骤2： 再建立另一个仓库：0hzc.github.io，此仓库命名必须命名为xxx.github.io，xxx为你的github用户名\n步骤3： 在本地调试完hugo的网页确定无误后，在目录下新建.github文件夹，此文件夹与hugo new site 的文件夹同级,再在.github文件夹下新建一个名为workflows的文件夹\n步骤4： 在.github/workflows文件夹下新建xxx.yml文件，xxx随意命名，此文件为githubwebpages的自动部署文件，内容可填写为如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 name: github pages # 名字自取 on: push: branches: - main # 这里的意思是当 main分支发生push的时候，运行下面的jobs，这里先改为github-actions jobs: deploy: # 任务名自取 runs-on: ubuntu-latest\t# 在什么环境运行任务 steps: - uses: actions/checkout@v2\t# 引用actions/checkout这个action，与所在的github仓库同名 with: submodules: true # Fetch Hugo themes (true OR recursive) 获取submodule主题 fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo\t# 步骤名自取 uses: peaceiris/actions-hugo@v2\t# hugo官方提供的action，用于在任务环境中获取hugo with: hugo-version: \u0026#39;latest\u0026#39;\t# 获取最新版本的hugo extended: true - name: Build run: hugo --minify\t# 使用hugo构建静态网页 - name: Deploy uses: peaceiris/actions-gh-pages@v3\t# 一个自动发布github pages的action with: # github_token: ${{ secrets.GITHUB_TOKEN }} 该项适用于发布到源码相同repo的情况，不能用于发布到其他repo external_repository: 0Hzc/0Hzc.github.io\t# 发布到哪个repo personal_token: ${{ secrets.hzcblog }}\t# 发布到其他repo需要提供上面生成的personal access token publish_dir: ./public\t# 注意这里指的是要发布哪个文件夹的内容，而不是指发布到目的仓库的什么位置，因为hugo默认生成静态网页到public文件夹，所以这里发布public文件夹里的内容 publish_branch: main\t# 发布到哪个branch 其中需要做修改的为“ external_repository: 0Hzc/0Hzc.github.io”需要将对应的部分改为步骤2的仓库名，“personal_token: ${{ secrets.hzcblog }}”需要将对应的部分改为生成的personal access token\n步骤5： 使用git工具推送至步骤一建立的仓库即可\ngit的相关使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #将本地文件进行git git init #连接远程仓库 git remote add origin xxxxx #origin是远程仓库的别名，可以自定义，后续推送至仓库时需要用到这个别名，xxxx是远程仓库的url #检查连接的远程仓库，以及在本地的别名 git remote -v #将文件/修改的文件，添加至暂存区 git add . #也可以指定文件添加 将.改为具体文件路径 #可查看暂存区有哪些文件 git status #确定暂存区无误，确定提交 git commit -m \u0026#34;提交信息\u0026#34; #提交信息为自定义，可以写本次提交的说明 #将暂存区的文件提交至远程仓库 git push origin main #origin是远程仓库的别名，main是远程仓库的分支（branch），也可以自定义 #删除本地与远程仓库的连接 git remote remove origin #origin是远程仓库在本地的别名 参考链接 https://krislinzhao.github.io/docs/create-a-wesite-using-github-pages-and-hugo/\n","date":"2024-11-07T15:00:00+08:00","permalink":"https://0Hzc.github.io/p/%E4%BD%BF%E7%94%A8github-hugo%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/","title":"使用github+hugo部署博客"},{"content":"this article is to record how to use hugo to build blog\nintroduction this server is running on github\u0026rsquo;s codespace . I\u0026rsquo;ll try to solve this problem that can\u0026rsquo;t open the website by access 0Hzc.github.io\n1.step1 get ready for the environment,to deploy this server need go , git ,and install hugo_extrended . Notice that hugo edition is hugo_extrended not the standard hugo : if use the standard hugo,you will can\u0026rsquo;t deploy other themes.\n2. step2 according to the docs from hugo\u0026rsquo;s official websites,use the following command:\n1 2 3 4 5 hugo new site quickstart //dirname is the directory for storing the project cd quickstart git submodule add https://xxxxxxx.git themes/xxx. //xxxxxxx is the url for the themes which you choose,xxx is the name of themes echo \u0026#34;theme = \u0026#39;xxx\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml. // this command is add \u0026#34;theme = \u0026#39;xxx\u0026#39;\u0026#34; into the hugo.toml hugo server ","date":"2024-11-05T15:00:00+08:00","permalink":"https://0Hzc.github.io/p/how-to-deploy-blog-system-by-hugo/","title":"How to deploy blog system by hugo"}]